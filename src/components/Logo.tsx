import { useAppTheme } from '@/hooks/useAppTheme'
import { Theme } from '@/theme'
import { Path, Svg } from 'react-native-svg'
import { Box, BoxProps } from './Box'

type ColorProp = keyof Theme['colors']
type LogoMode = 'full' | 'symbol' | 'text'

type LogoColors = {
	symbolPrimary?: ColorProp
	symbolSecondary?: ColorProp
	text?: ColorProp
}

export type LogoProps = BoxProps & {
	mode?: LogoMode
	colors?: LogoColors
}

const DEFAULT_COLORS: Required<LogoColors> = {
	symbolPrimary: 'muted',
	symbolSecondary: 'background',
	text: 'muted',
}

const SYMBOL_DEFAULT_WIDTH = 67
const SYMBOL_DEFAULT_HEIGHT = 70

const WORDMARK_DEFAULT_WIDTH = 105
const WORDMARK_DEFAULT_HEIGHT = 46

export const Logo = ({
	mode = 'full',
	colors,
	gap,
	...boxProps
}: LogoProps) => {
	const theme = useAppTheme()
	const showSymbol = mode === 'full' || mode === 'symbol'
	const showText = mode === 'full' || mode === 'text'

	if (!showSymbol && !showText) {
		return null
	}

	const mergedColors = { ...DEFAULT_COLORS, ...colors }
	const resolvedPrimary = resolveColor(mergedColors.symbolPrimary, theme)
	const resolvedSecondary = resolveColor(mergedColors.symbolSecondary, theme)
	const resolvedText = resolveColor(mergedColors.text, theme)
	const fullDefaultWidth = SYMBOL_DEFAULT_WIDTH + WORDMARK_DEFAULT_WIDTH
	const fullDefaultHeight = Math.max(
		SYMBOL_DEFAULT_HEIGHT,
		WORDMARK_DEFAULT_HEIGHT,
	)

	const baseWidth = (() => {
		if (showSymbol && showText) return fullDefaultWidth
		if (showSymbol) return SYMBOL_DEFAULT_WIDTH
		return WORDMARK_DEFAULT_WIDTH
	})()

	const baseHeight = (() => {
		if (showSymbol && showText) return fullDefaultHeight
		if (showSymbol) return SYMBOL_DEFAULT_HEIGHT
		return WORDMARK_DEFAULT_HEIGHT
	})()

	const providedWidth = boxProps.width
	const providedHeight = boxProps.height
	const hasNumericWidth = typeof providedWidth === 'number'
	const hasNumericHeight = typeof providedHeight === 'number'

	let computedWidth = baseWidth
	let computedHeight = baseHeight

	if (hasNumericWidth) {
		computedWidth = providedWidth as number
		computedHeight = hasNumericHeight
			? (providedHeight as number)
			: ((providedWidth as number) * baseHeight) / baseWidth
	} else if (hasNumericHeight) {
		computedHeight = providedHeight as number
		computedWidth = ((providedHeight as number) * baseWidth) / baseHeight
	}

	const containerWidth = hasNumericWidth ? providedWidth : computedWidth
	const containerHeight = hasNumericHeight ? providedHeight : computedHeight

	const containerGapProp: BoxProps['gap'] = gap

	let dynamicGap: number | undefined

	if (gap === undefined && showSymbol && showText) {
		const defaultGap = theme.spacing.s
		const containerHeightNumber =
			typeof containerHeight === 'number' ? containerHeight : undefined
		const containerWidthNumber =
			typeof containerWidth === 'number' ? containerWidth : undefined
		let ratio = 1
		if (containerHeightNumber !== undefined) {
			ratio = containerHeightNumber / fullDefaultHeight
		} else if (containerWidthNumber !== undefined) {
			ratio = containerWidthNumber / fullDefaultWidth
		}
		dynamicGap = defaultGap * ratio
	}

	const symbolFlexGrow = showSymbol && showText ? SYMBOL_DEFAULT_WIDTH : 1
	const wordmarkFlexGrow = showSymbol && showText ? WORDMARK_DEFAULT_WIDTH : 1

	return (
		<Box
			flexDirection="row"
			alignItems="center"
			gap={containerGapProp}
			width={containerWidth}
			height={containerHeight}
			{...boxProps}>
			{showSymbol ? (
				<Box
					flexGrow={symbolFlexGrow}
					flexBasis={0}
					height="100%"
					aspectRatio={SYMBOL_DEFAULT_WIDTH / SYMBOL_DEFAULT_HEIGHT}
					justifyContent="center"
					alignItems="center"
					style={
						dynamicGap !== undefined && gap === undefined && showText
							? { marginRight: dynamicGap }
							: undefined
					}>
					<LogoSymbol primary={resolvedPrimary} secondary={resolvedSecondary} />
				</Box>
			) : null}
			{showText ? (
				<Box
					flexGrow={wordmarkFlexGrow}
					flexBasis={0}
					height="100%"
					aspectRatio={WORDMARK_DEFAULT_WIDTH / WORDMARK_DEFAULT_HEIGHT}
					justifyContent="center"
					alignItems="center">
					<LogoWordmark textColor={resolvedText} />
				</Box>
			) : null}
		</Box>
	)
}

type LogoSymbolProps = {
	primary: string
	secondary: string
}

const LogoSymbol = ({ primary, secondary }: LogoSymbolProps) => (
	<Svg
		width="100%"
		height="100%"
		viewBox="0 0 67 70"
		fill="none"
		preserveAspectRatio="xMidYMid meet">
		<Path
			d="M30.8814 0.0954871C31.7373 0.0547395 32.6024 -0.000528338 33.458 3.81392e-06C34.0912 0.000383922 34.7328 0.0466812 35.3668 0.0663708C36.3511 0.109171 37.4082 0.225712 38.3851 0.376083C38.9379 0.461227 39.5082 0.608329 40.0579 0.699099L40.5098 0.80743C41.5534 1.03861 43.5083 1.57555 44.4828 2.00097C46.7508 2.87162 48.9059 4.01071 50.9022 5.39382C51.7382 5.97873 52.4887 6.59853 53.2989 7.2077C53.791 7.23818 54.2773 7.26547 54.7673 7.31816C59.5394 7.83123 62.8613 11.8982 62.5571 16.6215C62.508 17.3863 62.3896 18.1451 62.2033 18.8886C64.784 22.7541 66.1573 26.7701 66.6425 31.3821C66.7679 32.5744 66.9208 34.1799 66.7986 35.3759C65.6909 34.8314 64.6844 34.213 63.5169 33.6573C65.7571 38.4152 65.7307 42.9671 63.9866 47.9088C63.5116 49.2547 62.4193 51.6894 61.5034 52.7844C60.9273 51.4832 60.4633 50.5398 59.769 49.2919C58.7656 54.481 55.7402 59.0602 51.3573 62.0237C50.3814 62.6818 49.155 63.3575 48.065 63.7993C48.0116 62.653 47.99 61.5053 48.0004 60.3578C47.8692 60.531 47.681 60.7653 47.5653 60.9411C47.4694 61.0624 47.2316 61.3487 47.1609 61.466C46.3785 62.3996 45.8051 63.0136 44.8615 63.8096C44.3284 64.2869 43.8132 64.6293 43.2575 65.0593C43.1311 65.1371 42.4895 65.5283 42.4165 65.6127C41.7416 65.9642 41.1327 66.3621 40.4278 66.7148C38.4051 67.7038 36.2812 68.4716 34.0931 69.0047C33.641 69.0543 33.4362 69.0752 32.9924 69.0015C31.7231 68.7779 29.6931 68.0923 28.4883 67.6341L28.2982 67.5634C27.6788 67.3176 27.0674 67.0522 26.4647 66.7677C26.3774 66.7207 26.2877 66.683 26.1972 66.6422C25.6012 66.2824 24.9875 65.9985 24.3484 65.5923C21.9474 64.0662 20.3106 62.4639 18.6427 60.1998C18.6047 60.7762 18.5846 61.2855 18.5971 61.8661C18.5668 62.4164 18.5694 63.0816 18.5571 63.6419C17.6386 63.1466 16.6837 62.7003 15.7818 62.1914C15.1878 61.8562 14.4722 61.3181 13.941 60.8932C13.0625 60.1959 12.2512 59.4182 11.5174 58.5705C9.51071 56.2571 7.34569 52.4982 7.00311 49.4086C6.42716 50.1777 5.64728 51.9071 5.28247 52.8412C4.9233 52.3904 4.38297 51.482 4.10801 50.9674C1.9672 46.9607 0.809421 41.8889 1.77585 37.3989C1.93777 36.6511 2.15038 35.9152 2.41219 35.1962C2.58519 34.7272 2.82604 34.218 2.95625 33.744C2.12383 34.1381 1.36307 34.6602 0.571164 35.1273C0.393975 35.2318 0.241 35.3268 0.0505618 35.4098C-0.0473604 34.68 0.0194948 33.2758 0.0632019 32.5379C0.333266 27.6005 1.87558 22.8164 4.54082 18.6487C3.98405 17.289 4.05486 15.1338 4.39325 13.6978C4.53663 13.0894 4.88873 12.3776 5.18995 11.8234C6.52789 9.3623 8.54017 7.92952 11.2837 7.36582C11.9665 7.22549 13.2517 7.17295 13.7604 6.99993C13.9596 6.93212 15.197 5.88294 15.5217 5.64469C16.3368 5.05805 17.1803 4.51161 18.049 4.00734C19.3858 3.22104 20.8954 2.53662 22.3344 1.96387C24.7652 1.08499 27.1047 0.473543 29.6828 0.207619C30.0828 0.175258 30.4823 0.137827 30.8814 0.0954871Z"
			fill={primary}
		/>
		<Path
			d="M33.0005 28.2363C33.8184 28.1648 34.9018 28.288 35.693 28.4823C36.0293 29.0449 36.1845 30.3685 36.3559 31.0581C37.0474 33.8395 37.9859 36.7436 40.9665 37.8471C43.7541 38.8792 47.6244 38.7248 50.4222 37.7454C52.0279 37.1833 53.3778 35.1695 53.904 33.6476C54.0879 33.1093 54.2566 32.4488 54.4724 31.916L54.4989 31.8514C54.5455 32.0425 54.5796 32.2305 54.6131 32.4247C55.1193 35.381 55.3175 38.7692 53.4154 41.3048C52.126 43.0237 50.2778 43.9107 48.3863 44.7832C47.8401 47.9877 46.6201 51.1461 44.3393 53.519C42.1584 55.7879 39.418 57.0574 36.4461 57.9773C35.5009 58.2699 34.4429 58.5814 33.4546 58.606C30.4663 58.3419 27.1409 56.9823 24.6335 55.3884C20.5219 52.7749 19.2275 49.2913 18.2202 44.7683C17.7847 44.5482 17.2933 44.3672 16.8527 44.1432C15.5012 43.456 14.1362 42.5362 13.2466 41.2949C11.0359 38.2101 11.7688 34.9154 12.2826 31.5428C12.4071 31.8704 12.6121 32.6271 12.7135 33.001C13.1397 34.5718 13.9396 36.0025 15.2134 37.0601C17.2194 38.5872 20.8203 38.6275 23.1837 38.4702C26.7112 38.2353 29.0402 36.2592 29.9389 32.9232C30.1175 32.2604 30.3965 31.467 30.5225 30.7971C30.9789 28.3718 30.5962 28.4192 33.0005 28.2363Z"
			fill={secondary}
		/>
		<Path
			d="M30.7971 37.5892C31.317 37.5285 32.3505 37.5607 32.9344 37.5701C34.3736 37.6008 35.8509 37.451 37.2602 37.8053C38.2043 38.0426 38.9605 39.1002 38.5688 40.0345C37.9161 41.5909 35.8036 42.8834 34.3756 43.6292L34.3776 46.9993C36.6915 48.7128 38.8314 49.8431 41.6255 48.3027C42.9666 49.3065 41.4752 50.6355 40.4059 50.963C38.4301 51.5683 36.6406 50.7882 34.9126 49.8784C34.388 49.5664 33.8572 49.1994 33.3531 48.8559C32.8558 49.1256 32.4082 49.4527 31.9142 49.7602C29.9879 50.9592 26.9565 51.9873 25.0532 50.218C24.8154 49.997 24.463 49.5073 24.4692 49.1714C24.4757 48.821 24.7713 48.5405 25.0082 48.3071C27.8347 49.8727 29.9237 48.6479 32.3144 47.0048L32.313 43.6152C31.9447 43.405 30.899 42.8595 30.5901 42.6016C29.7405 41.8718 28.217 40.8474 28.0699 39.657C27.8637 37.9909 29.5783 37.7025 30.7971 37.5892Z"
			fill={primary}
		/>
		<Path
			d="M40.4313 11.8289C42.0507 12.1797 43.4247 12.5922 44.9248 13.3743C48.3715 15.171 51.2936 18.1458 53.058 21.6048C53.3358 22.1494 53.6043 22.9324 53.7898 23.5086C51.7119 23.1887 49.4968 23.1871 47.3996 23.242C46.576 23.2636 45.7372 23.2307 44.9127 23.2621C43.8771 23.3015 42.8596 23.3584 41.8213 23.3611C39.3864 23.3651 37.2238 23.445 36.231 25.9993C34.6366 25.6221 32.1575 25.7095 30.5475 26.0351C29.8441 24.7156 29.0949 23.7993 27.5383 23.5428C26.2263 23.3267 24.9049 23.383 23.5802 23.3306C20.0478 23.1911 16.5483 23.059 13.0292 23.4883C13.2643 22.2457 14.207 20.5967 14.9433 19.5381C17.5953 15.7254 21.5992 12.7181 26.2072 11.8436C26.6497 11.9241 27.665 12.5936 28.0975 12.8565L31.1991 14.7261C31.8279 15.1051 32.7057 15.6763 33.3649 15.9384C33.8087 15.7891 34.6692 15.2341 35.1003 14.9736L38.301 13.0382C38.9394 12.6518 39.7668 12.1084 40.4313 11.8289ZM16.8003 25.4741C18.0626 25.4064 19.9359 25.5296 21.2578 25.556C22.5088 25.5727 23.7595 25.6093 25.0093 25.6657C26.2116 25.713 27.7336 25.6128 28.4138 26.8097C29.409 28.5613 28.6549 30.8085 28.0671 32.5527C27.4644 34.3409 27.1447 34.9385 25.5571 35.9166C24.9786 36.2133 24.2381 36.4788 23.5898 36.5479C21.9788 36.7198 19.449 36.7459 17.9256 36.2519C17.4161 36.0879 16.9394 35.8362 16.5167 35.5083C15.3169 34.5757 14.5449 32.596 14.4129 31.1066C14.2996 29.8267 13.886 27.1863 14.7047 26.0924C15.1063 25.5558 16.1712 25.522 16.8003 25.4741Z"
			fill={secondary}
		/>
		<Path
			d="M49.1106 25.4754C49.8415 25.4521 50.522 25.4325 51.2433 25.5887C52.2637 25.8094 52.3633 26.3823 52.4356 27.3018C52.5654 29.0363 52.4796 30.9264 51.9939 32.5926C51.2809 35.0389 49.7164 36.3836 47.166 36.5385C46.0191 36.6081 44.9255 36.7681 43.7544 36.604C43.0654 36.5074 42.5535 36.398 41.8951 36.1891C41.2802 35.9833 40.6445 35.6124 40.1651 35.1758C38.9891 34.105 37.964 30.6457 37.8901 29.062C37.8485 28.172 38.0226 27.0912 38.6576 26.4161C38.9894 26.0634 39.3879 25.9058 39.8507 25.8077C40.784 25.6098 41.8195 25.6597 42.7748 25.6278L49.1106 25.4754Z"
			fill={secondary}
		/>
		<Path
			d="M12.4057 11.26C14.6215 11.1511 16.3512 12.2658 17.7235 13.9081C15.5961 15.9234 13.7503 17.8027 12.363 20.4376C12.1861 20.7612 12.0226 21.1141 11.8614 21.4474C8.34453 19.9896 6.08135 14.2519 9.99345 11.9211C10.7386 11.4772 11.5525 11.3079 12.4057 11.26ZM53.8107 11.2596C55.8118 11.1611 57.7151 11.9762 58.473 13.9291C59.5213 16.6307 57.9315 19.6298 55.6465 21.1318C55.4465 21.2633 55.1141 21.3806 54.887 21.4672C54.8017 21.2617 54.7152 21.0568 54.6274 20.8524C53.2343 18.027 51.3277 15.9979 49.0312 13.8945C50.3528 12.2573 51.7092 11.4899 53.8107 11.2596ZM10.2162 26.4331C10.9361 26.6087 11.4974 26.7314 12.2294 26.8389C12.2281 27.1226 12.3342 28.4215 12.1548 28.5386C11.5531 28.4641 10.4766 28.2189 10.163 27.6325C9.9553 27.2441 10.0921 26.8233 10.2162 26.4331ZM56.27 26.6471C56.3402 26.6352 56.3138 26.642 56.3961 26.6706C56.7676 27.0323 56.556 27.8702 56.1641 28.1558C55.8162 28.4092 55.3178 28.4871 54.9053 28.5811C54.7871 28.6037 54.7131 28.6296 54.5971 28.5989C54.4998 28.3537 54.5486 27.324 54.5548 26.9911C55.0724 26.8583 55.7354 26.749 56.27 26.6471Z"
			fill={secondary}
		/>
		<Path
			d="M21.2316 27.2304C22.0208 27.2089 22.4346 27.4077 23.1424 27.5383C24.9106 27.8646 26.2287 28.7759 25.8723 30.7475C25.7113 31.6385 25.1263 32.349 24.3998 32.8458C24.3248 32.8839 24.2712 32.9078 24.1923 32.9398C23.815 33.0971 23.4099 33.1775 23.001 33.1761C22.5921 33.1747 22.1875 33.0916 21.8113 32.9317C21.4399 32.7697 21.1049 32.5348 20.8262 32.2409C20.5475 31.947 20.3309 31.6002 20.1891 31.2211C19.8665 30.3787 19.8461 28.9466 20.2216 28.1066C20.4387 27.621 20.7559 27.4045 21.2316 27.2304Z"
			fill={primary}
		/>
		<Path
			d="M45.0779 27.2385C46.8735 27.0321 46.9571 29.7766 46.6302 30.9367C46.0845 32.8736 44.5144 33.4887 42.6728 32.9829C42.4854 32.8967 42.3484 32.8316 42.1763 32.7165C41.8234 32.4795 41.5216 32.1744 41.2886 31.8192C41.0557 31.4641 40.8962 31.0659 40.8197 30.6483C40.3249 27.9579 43.1195 27.5807 45.0779 27.2385Z"
			fill={primary}
		/>
	</Svg>
)

type LogoWordmarkProps = {
	textColor: string
}

const LogoWordmark = ({ textColor }: LogoWordmarkProps) => (
	<Svg
		width="100%"
		height="100%"
		viewBox="0 0 105 46"
		fill="none"
		preserveAspectRatio="xMidYMid meet">
		<Path
			d="M10.696 45.0731C8.33136 45.0731 6.56757 44.763 5.40463 44.1427C4.24169 43.5225 3.27258 42.3983 2.49728 40.7702C1.95458 39.5298 1.4894 37.514 1.10175 34.7229C0.752871 31.8931 0.57843 28.2298 0.57843 23.7331C0.57843 20.5932 0.636577 17.5889 0.752872 14.7204C0.90793 11.8518 1.12114 9.64218 1.39249 8.0916C1.70261 6.1146 2.20655 4.69969 2.90431 3.84687C3.64084 2.99404 4.55181 2.56763 5.63722 2.56763C6.60634 2.56763 7.36225 2.99404 7.90495 3.84687C8.48642 4.69969 8.89345 5.86263 9.12604 7.33569C9.35863 8.76998 9.47492 10.3593 9.47492 12.1037C9.47492 16.833 9.30048 21.6205 8.9516 26.4661C8.64148 31.3116 8.19569 35.7696 7.61422 39.8399L6.85831 38.7932C8.60272 37.5915 10.4634 36.5643 12.4404 35.7114C14.4562 34.8586 16.4138 34.1996 18.3133 33.7344C20.2515 33.2693 21.9378 33.0367 23.3721 33.0367C24.8064 33.0367 25.853 33.3274 26.512 33.9089C27.2098 34.4903 27.5586 35.3238 27.5586 36.4092C27.5586 37.4946 27.0741 38.5994 26.105 39.7236C25.1746 40.809 23.8372 41.7587 22.0928 42.5728C21.1237 43.038 19.9801 43.4644 18.6621 43.852C17.3442 44.2009 15.9874 44.4916 14.5919 44.7242C13.2351 44.9568 11.9365 45.0731 10.696 45.0731Z"
			fill={textColor}
		/>
		<Path
			d="M33.9989 0.125458C35.5495 0.125458 36.6543 0.551868 37.3133 1.40469C38.011 2.25751 38.3599 3.24601 38.3599 4.37019C38.3599 5.76572 37.9335 6.85113 37.0807 7.62642C36.2666 8.36295 35.1037 8.73122 33.5918 8.73122C32.1188 8.73122 31.014 8.32419 30.2775 7.51013C29.5409 6.6573 29.1727 5.6688 29.1727 4.54463C29.1727 3.07157 29.6185 1.96678 30.5101 1.23025C31.4016 0.493722 32.5646 0.125458 33.9989 0.125458ZM34.3478 13.0922C35.5882 13.0922 36.5573 14.2552 37.2551 16.5811C37.9916 18.9069 38.3599 22.609 38.3599 27.6871C38.3599 33.9283 37.9141 38.425 37.0225 41.1772C36.1309 43.9295 34.7742 45.3057 32.9522 45.3057C31.5567 45.3057 30.5294 44.2978 29.8704 42.282C29.2114 40.2275 28.8819 36.6612 28.8819 31.583C28.8819 25.3419 29.3859 20.7095 30.3938 17.6859C31.4404 14.6234 32.7584 13.0922 34.3478 13.0922Z"
			fill={textColor}
		/>
		<Path
			d="M56.1038 44.8987C53.0026 44.8987 50.2891 44.2203 47.9632 42.8635C45.6761 41.468 43.893 39.491 42.6137 36.9325C41.3732 34.3741 40.753 31.331 40.753 27.8034C40.753 24.1208 41.3926 20.9033 42.6719 18.151C43.9511 15.3987 45.7537 13.2473 48.0795 11.6967C50.4442 10.1461 53.1771 9.37083 56.2783 9.37083C59.612 9.37083 62.5 10.1267 64.9422 11.6386C67.3843 13.1116 69.2838 15.1855 70.6406 17.8603C71.9973 20.5351 72.6757 23.6556 72.6757 27.222C72.6757 30.8658 71.9973 34.0058 70.6406 36.6418C69.2838 39.2778 67.365 41.3129 64.884 42.7472C62.4031 44.1815 59.4763 44.8987 56.1038 44.8987ZM56.9179 37.0488C59.3213 37.0488 61.2208 36.0991 62.6163 34.1996C64.0506 32.2614 64.7677 29.7029 64.7677 26.5242C64.7677 23.3067 64.0506 20.7483 62.6163 18.8488C61.2208 16.9493 59.3213 15.9996 56.9179 15.9996C54.4369 15.9996 52.4793 16.9493 51.045 18.8488C49.6107 20.7483 48.8936 23.3067 48.8936 26.5242C48.8936 29.7029 49.6107 32.2614 51.045 34.1996C52.4793 36.0991 54.4369 37.0488 56.9179 37.0488Z"
			fill={textColor}
		/>
		<Path
			d="M80.9853 8.55677C82.2258 8.55677 83.0592 9.06071 83.4856 10.0686C83.9508 11.0765 84.1834 12.5689 84.1834 14.5459C84.1834 15.0111 84.1446 15.515 84.0671 16.0577C84.0283 16.5617 83.9508 17.0269 83.8345 17.4533L83.7182 16.2903C84.6486 13.7706 86.0828 11.813 88.0211 10.4175C89.9593 8.98318 92.0138 8.26604 94.1847 8.26604C96.5881 8.26604 98.5845 8.94442 100.174 10.3012C101.802 11.6579 103.004 13.5574 103.779 15.9996C104.593 18.4418 105 21.3297 105 24.6635C105 26.718 104.903 28.7532 104.709 30.7689C104.554 32.7459 104.322 34.5679 104.012 36.2348C103.74 37.8629 103.43 39.2002 103.081 40.2469C102.616 41.5649 102.015 42.5534 101.279 43.2124C100.542 43.8326 99.6699 44.1427 98.662 44.1427C97.6541 44.1427 96.8788 43.7745 96.3361 43.038C95.7934 42.3014 95.522 41.3129 95.522 40.0725C95.522 38.7545 95.619 37.1651 95.8128 35.3044C96.0066 33.4049 96.181 31.4861 96.3361 29.5478C96.5299 27.5708 96.6268 25.7877 96.6268 24.1983C96.6268 18.7713 94.8437 16.0577 91.2773 16.0577C89.3778 16.0577 87.7885 16.9106 86.5093 18.6162C85.23 20.2831 84.3772 22.6671 83.9508 25.7683C83.8345 26.8149 83.7764 28.1136 83.7764 29.6641C83.7764 31.2147 83.7764 32.7653 83.7764 34.3159C83.8151 35.8277 83.7763 37.107 83.6601 38.1536C83.505 40.4795 83.0592 42.1464 82.3227 43.1542C81.6249 44.1621 80.6558 44.6661 79.4153 44.6661C77.981 44.6661 76.8956 44.0071 76.1591 42.6891C75.4226 41.3323 75.0543 39.0646 75.0543 35.8859C75.0543 34.2578 75.0931 32.4358 75.1706 30.4201C75.2481 28.4043 75.345 26.3885 75.4613 24.3728C75.6164 22.3182 75.7908 20.4575 75.9846 18.7906C76.3723 15.6507 76.9344 13.1698 77.6709 11.3478C78.4074 9.48713 79.5122 8.55677 80.9853 8.55677Z"
			fill={textColor}
		/>
	</Svg>
)

const resolveColor = (value: ColorProp, theme: Theme): string => {
	if (hasThemeColor(value, theme)) {
		return theme.colors[value]
	}
	return value
}

const hasThemeColor = (value: string, theme: Theme) =>
	Object.prototype.hasOwnProperty.call(theme.colors, value)
